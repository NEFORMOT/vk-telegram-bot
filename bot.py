import os
import sys
import json
import random
import logging
import requests
import argparse
import subprocess
from datetime import datetime
from config import Config
from image_analyzer import ImageAnalyzer
from keywords import sketch_keywords, tattoo_keywords, in_progress_keywords, equipment_keywords, appointment_keywords, equipment_and_studio_keywords
from compliments import (
    weekly_compliments, sketch_compliments, tattoo_compliments, in_progress_compliments,
    equipment_compliments, appointment_compliments, client_interactions_compliments,
    tattoo_ideas_compliments, equipment_and_studio_compliments, no_photo_message
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
analyzer = ImageAnalyzer(Config.HF_TOKEN, Config.YNDX_API_KEY)
logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ImageAnalyzer –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
def load_state():
    logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞...")
    try:
        with open(Config.STATE_FILE, 'r', encoding='utf-8') as f:
            state = json.load(f)
            logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            return state
    except (FileNotFoundError, json.JSONDecodeError):
        logging.info("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π")
        return {
            "last_checked": None,
            "processed_posts": {},
            "weekly_compliments_used": [],
            "client_interactions_compliments_used": [],
            "tattoo_ideas_compliments_used": [],
            "equipment_and_studio_compliments_used": [],
            "sketch_compliments_used": [],
            "tattoo_compliments_used": [],
            "in_progress_compliments_used": [],
            "equipment_compliments_used": [],
            "appointment_compliments_used": [],
            "last_equipment_and_studio_day": -1
        }

def save_state(state):
    logging.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª...")
    try:
        with open(Config.STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(state, f, indent=4)
        subprocess.run(['git', 'config', '--global', 'user.email', 'bot@example.com'], check=True)
        subprocess.run(['git', 'config', '--global', 'user.name', 'Bot'], check=True)
        subprocess.run(['git', 'add', Config.STATE_FILE], check=True)
        result = subprocess.run(['git', 'commit', '-m', f'Update {Config.STATE_FILE}'], capture_output=True, text=True)
        if result.returncode == 0:
            subprocess.run(['git', 'push', 'origin', 'main'], check=True)
            logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        else:
            logging.info("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
def get_unique_compliment(compliments_list, used_list_key, state):
    if not compliments_list:
        logging.error(f"–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ –¥–ª—è {used_list_key} –ø—É—Å—Ç!")
        return "–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –Ω–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–ª–æ–¥–µ—Ü! üòä"
    used_compliments = state.get(used_list_key, [])
    available_compliments = [comp for comp in compliments_list if comp not in used_compliments]
    if not available_compliments:
        state[used_list_key] = []
        available_compliments = compliments_list
        logging.info(f"–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ –¥–ª—è {used_list_key} –∏—Å—á–µ—Ä–ø–∞–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞")
    compliment = random.choice(available_compliments)
    state[used_list_key].append(compliment)
    save_state(state)
    return compliment

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) –∏–∑ –ø–æ—Å—Ç–∞
def get_media_url(post):
    logging.info("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –º–µ–¥–∏–∞ –∏–∑ –ø–æ—Å—Ç–∞")
    for attachment in post.get('attachments', []):
        if attachment.get('type') == 'photo':
            sizes = attachment.get('photo', {}).get('sizes', [])
            if sizes:
                url = max(sizes, key=lambda s: s.get('width', 0) * s.get('height', 0)).get('url')
                logging.info(f"–ù–∞–π–¥–µ–Ω URL —Ñ–æ—Ç–æ: {url}")
                return url, "photo"
        elif attachment.get('type') == 'video':
            video = attachment.get('video', {})
            owner_id = video.get('owner_id')
            video_id = video.get('id')
            if owner_id and video_id:
                url = f"https://vk.com/video{owner_id}_{video_id}"
                logging.info(f"–ù–∞–π–¥–µ–Ω URL –≤–∏–¥–µ–æ: {url}")
                return url, "video"
    logging.warning("–ú–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å—Ç–µ")
    return None, None

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –º–µ–¥–∏–∞
def classify_media(post_text, caption, media_type):
    logging.info(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –º–µ–¥–∏–∞: post_text={post_text}, caption={caption}, media_type={media_type}")
    caption_lower = caption.lower() if caption else ""
    post_text_lower = post_text.lower() if post_text else ""
    post_lines = post_text_lower.split('\n')
    first_line = post_lines[0] if post_lines else ""
    rest_text = '\n'.join(post_lines[1:]) if len(post_lines) > 1 else ""

    if not post_text_lower and not caption_lower and not media_type:
        logging.warning("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞, –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'tattoo' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return "tattoo"

    if post_text_lower:
        if any(keyword in post_text_lower for keyword in appointment_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: appointment (–ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞: {post_text_lower})")
            return "appointment"
        elif any(keyword in post_text_lower for keyword in in_progress_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: in_progress (–ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞: {post_text_lower})")
            return "in_progress"
        elif any(keyword in post_text_lower for keyword in tattoo_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: tattoo (–ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞: {post_text_lower})")
            return "tattoo"
        elif any(keyword in post_text_lower for keyword in sketch_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: sketch (–ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞: {post_text_lower})")
            return "sketch"
        elif any(keyword in post_text_lower for keyword in equipment_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: equipment (–ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞: {post_text_lower})")
            return "equipment"
        elif any(keyword in post_text_lower for keyword in equipment_and_studio_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: equipment_and_studio (–ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞: {post_text_lower})")
            return "equipment_and_studio"

    if caption_lower:
        if any(keyword in caption_lower for keyword in appointment_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: appointment (–ø–æ –ø–æ–¥–ø–∏—Å–∏: {caption_lower})")
            return "appointment"
        elif any(keyword in caption_lower for keyword in tattoo_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: tattoo (–ø–æ –ø–æ–¥–ø–∏—Å–∏: {caption_lower})")
            return "tattoo"
        elif any(keyword in caption_lower for keyword in in_progress_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: in_progress (–ø–æ –ø–æ–¥–ø–∏—Å–∏: {caption_lower})")
            return "in_progress"
        elif any(keyword in caption_lower for keyword in sketch_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: sketch (–ø–æ –ø–æ–¥–ø–∏—Å–∏: {caption_lower})")
            return "sketch"
        elif any(keyword in caption_lower for keyword in equipment_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: equipment (–ø–æ –ø–æ–¥–ø–∏—Å–∏: {caption_lower})")
            return "equipment"
        elif any(keyword in caption_lower for keyword in equipment_and_studio_keywords):
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø: equipment_and_studio (–ø–æ –ø–æ–¥–ø–∏—Å–∏: {caption_lower})")
            return "equipment_and_studio"

    if media_type == "video":
        logging.info("–í–∏–¥–µ–æ –±–µ–∑ —è–≤–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'tattoo' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return "tattoo"
    if media_type == "photo":
        logging.info("–§–æ—Ç–æ –±–µ–∑ —è–≤–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'tattoo' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return "tattoo"
    logging.info("–¢–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'tattoo' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    return "tattoo"

# –í—ã–±–æ—Ä –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞
def get_compliment(post_text, caption, media_type, state):
    logging.info("–í—ã–±–æ—Ä –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞")
    image_type = classify_media(post_text, caption, media_type)
    logging.info(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –º–µ–¥–∏–∞: {image_type}")
    if image_type == "sketch":
        return get_unique_compliment(sketch_compliments, "sketch_compliments_used", state)
    elif image_type == "tattoo":
        return get_unique_compliment(tattoo_compliments, "tattoo_compliments_used", state)
    elif image_type == "in_progress":
        return get_unique_compliment(in_progress_compliments, "in_progress_compliments_used", state)
    elif image_type == "equipment":
        return get_unique_compliment(equipment_compliments, "equipment_compliments_used", state)
    elif image_type == "appointment":
        return get_unique_compliment(appointment_compliments, "appointment_compliments_used", state)
    elif image_type == "equipment_and_studio":
        return get_unique_compliment(equipment_and_studio_compliments, "equipment_and_studio_compliments_used", state)
    return get_unique_compliment(tattoo_compliments, "tattoo_compliments_used", state)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
def check_new_post(state):
    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
    last_checked = state["last_checked"]
    processed_posts = state["processed_posts"]
    url = f"https://api.vk.com/method/wall.get?owner_id={Config.GROUP_ID}&count=5&access_token={Config.VK_TOKEN}&v=5.131"
    try:
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ VK API: {url}")
        response = requests.get(url, timeout=10).json()
        logging.info(f"–û—Ç–≤–µ—Ç VK API: {response}")
        if "response" in response and response["response"]["items"]:
            posts = response["response"]["items"]
            last_checked_date = None
            if last_checked:
                try:
                    last_checked_date = datetime.fromisoformat(last_checked)
                except ValueError:
                    logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç last_checked: {last_checked}, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º")
                    last_checked_date = None

            for post in posts:
                post_id = post["id"]
                post_date = datetime.fromtimestamp(post["date"])
                is_pinned = post.get("is_pinned", False)

                logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞: ID={post_id}, –¥–∞—Ç–∞={post_date}, –∑–∞–∫—Ä–µ–ø–ª—ë–Ω={is_pinned}")
                if str(post_id) not in processed_posts:
                    if not last_checked_date or post_date > last_checked_date:
                        if is_pinned and last_checked_date and post_date <= last_checked_date:
                            logging.info(f"–ü—Ä–æ–ø—É—Å–∫ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ—Å—Ç–∞: ID={post_id}")
                            continue
                        state["last_checked"] = post_date.isoformat()
                        processed_posts[str(post_id)] = True
                        save_state(state)
                        media_url, media_type = get_media_url(post)
                        logging.info(f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞–π–¥–µ–Ω: ID={post_id}, –º–µ–¥–∏–∞={media_url}, —Ç–∏–ø={media_type}, —Ç–µ–∫—Å—Ç={post.get('text', '')}")
                        return True, media_url, media_type, post.get("text", "")
            if posts:
                newest_post_date = max(datetime.fromtimestamp(post["date"]) for post in posts)
                state["last_checked"] = newest_post_date.isoformat()
                save_state(state)
            logging.info("–ù–æ–≤—ã—Ö –Ω–µ–∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            logging.warning("–û—Ç–≤–µ—Ç VK API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å—Ç–æ–≤")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
    logging.info("–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    return False, None, None, ""

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(text):
    logging.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {text}")
    if not Config.TELEGRAM_TOKEN:
        logging.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    if not Config.CHAT_ID_TRACKING or not Config.CHAT_ID_HER:
        logging.error(f"CHAT_ID_TRACKING ({Config.CHAT_ID_TRACKING}) –∏–ª–∏ CHAT_ID_HER ({Config.CHAT_ID_HER}) –Ω–µ –∑–∞–¥–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    url = f"https://api.telegram.org/bot{Config.TELEGRAM_TOKEN}/sendMessage"
    params_tracking = {"chat_id": Config.CHAT_ID_TRACKING, "text": text}
    params_her = {"chat_id": Config.CHAT_ID_HER, "text": text}
    try:
        response = requests.post(url, params=params_tracking, timeout=10)
        if response.status_code == 200:
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (tracking, chat_id={Config.CHAT_ID_TRACKING})")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ Telegram (tracking): {response.status_code}, {response.text}")
        response = requests.post(url, params=params_her, timeout=10)
        if response.status_code == 200:
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (her, chat_id={Config.CHAT_ID_HER})")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ Telegram (her): {response.status_code}, {response.text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞
def job(state, compliment_type=None):
    try:
        if compliment_type:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ {compliment_type}")
            if compliment_type == "weekly":
                message = get_unique_compliment(weekly_compliments, "weekly_compliments_used", state)
                send_telegram_message(message)
            elif compliment_type == "client_interactions":
                message = get_unique_compliment(client_interactions_compliments, "client_interactions_compliments_used", state)
                send_telegram_message(message)
            elif compliment_type == "tattoo_ideas":
                message = get_unique_compliment(tattoo_ideas_compliments, "tattoo_ideas_compliments_used", state)
                send_telegram_message(message)
            elif compliment_type == "equipment_and_studio":
                today = datetime.now().weekday()
                if "last_equipment_and_studio_day" not in state:
                    state["last_equipment_and_studio_day"] = -1
                if state["last_equipment_and_studio_day"] != today:
                    if random.random() < 1.0 / 7.0:
                        state["last_equipment_and_studio_day"] = today
                        message = get_unique_compliment(equipment_and_studio_compliments, "equipment_and_studio_compliments_used", state)
                        send_telegram_message(message)
                        logging.info("–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç equipment_and_studio –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    else:
                        logging.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º equipment_and_studio –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç")
                else:
                    logging.info("–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç equipment_and_studio —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ")
            else:
                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞: {compliment_type}")
                return
        else:
            logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤ (job)")
            has_new_post, media_url, media_type, post_text = check_new_post(state)
            if has_new_post:
                logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")
                if media_url:
                    caption = analyzer.get_image_caption(media_url) if media_type == "photo" else None
                    message = get_compliment(post_text, caption, media_type, state)
                else:
                    message = get_compliment(post_text, None, media_type, state) if post_text else no_photo_message
                send_telegram_message(message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ job: {e}")
        save_state(state)

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞... Python –≤–µ—Ä—Å–∏—è: " + sys.version)
    logging.info("–¢–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥: " + os.getcwd())
    logging.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: " + str(os.listdir('.')))
    state = load_state()
    logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    parser = argparse.ArgumentParser()
    parser.add_argument('--compliment-type', type=str, help='Type of compliment to send')
    args = parser.parse_args()
    job(state, args.compliment_type)
